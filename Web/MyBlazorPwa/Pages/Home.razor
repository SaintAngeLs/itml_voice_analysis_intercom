@page "/"
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Run Python in Blazor!</h1>

<div>
    <p>Welcome to your Python in Blazor WebAssembly app. Upload an audio file or record your voice to run Python processing.</p>
</div>

<div>
    <label>Select Audio File:</label>
    <InputFile OnChange="OnFileSelected" />
</div>

<div style="margin-top: 10px;">
    <button @onclick="StartRecording">Start Recording</button>
    <button @onclick="StopRecording">Stop Recording</button>
</div>

<div style="margin-top: 10px;">
    <button @onclick="RunPythonCode">Run Python Code</button>
    <button @onclick="ClearResult">Clear</button>
</div>

<div id="output" style="margin-top: 20px;">
    <h4>Output</h4>
    <pre>@result</pre>
</div>

@code {
    private string result = "No output yet.";
    private IJSObjectReference pyodideModule;
    private IBrowserFile selectedFile;  // Use IBrowserFile to store the uploaded file
    private string audioFileName = string.Empty;
    private string recordedAudioUrl = string.Empty;

    // This function is triggered when a file is selected
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            audioFileName = selectedFile.Name;
            result = $"Audio file {audioFileName} selected!";
        }
        else
        {
            result = "No file selected.";
        }
    }

    // Start recording audio using the microphone
    private async Task StartRecording()
    {
        result = await JS.InvokeAsync<string>("startRecording");
    }

    // Stop recording audio and save the result
    private async Task StopRecording()
    {
        recordedAudioUrl = await JS.InvokeAsync<string>("stopRecording");
        if (!string.IsNullOrEmpty(recordedAudioUrl))
        {
            result = "Recording stopped. Ready for processing.";
        }
        else
        {
            result = "Error stopping recording.";
        }
    }

    // This function runs the Python code using JavaScript interop with Pyodide
    private async Task RunPythonCode()
    {
        if (selectedFile == null && string.IsNullOrEmpty(recordedAudioUrl))
        {
            result = "Please select an audio file or record your voice first.";
            return;
        }

        // Example Python code to process audio data (placeholder code)
        var pythonCode = $@"
import numpy as np
import io
result = 'Audio processed successfully.'
";

        // Call the JavaScript function to run Python using Pyodide
        try
        {
            result = await JS.InvokeAsync<string>("runPythonCode", pythonCode);
        }
        catch (Exception ex)
        {
            result = $"Error running Python code: {ex.Message}";
        }
    }

    private void ClearResult()
    {
        result = "No output yet.";
    }

    // Load the Pyodide module when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        pyodideModule = await JS.InvokeAsync<IJSObjectReference>("import", "./pyodideRunner.js");
    }

    // Dispose the JS module when the component is disposed
    public async ValueTask DisposeAsync()
    {
        if (pyodideModule != null)
        {
            await pyodideModule.DisposeAsync();
        }
    }
}
